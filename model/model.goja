model shop {
server Server {
 	public Service service;
}

//------------------------------------------------
//--------------------Services--------------------
//------------------------------------------------
abstract server Service {
	//Refresh
	void reloadUI@@Aktualisieren();
}

server OwnerService extends Service {
	//-----------------
	//-----Manager-----
	//-----------------
	server-only observe Shop shop;

   ComponentManager componentManager;
	ProducerLst prmanager;
	CustomerDeliveryTimeManager customerDeliveryTimeManager##cdtm;

	Settings settings;
	observe ReOrderManager reOrderManager;
	observe GlobalOrderManager orderManager##oom;
	ReturnManager returnManager##rm;

	GlobalOrderArchive orderArchive;

	//------------------
	//-----Producer-----
	//------------------
	//Legt einen neuen Hersteller an. Ist der Name nicht eindeutig wird eine DoubleDefinitionException geworfen.
	void createProducer@@Hersteller_anlegen(ProducerLst prmanager, String name) throws DoubleDefinitionException, InvalidInputException;

	//--------------------
	//-----Components-----k
	//--------------------
	//Legt einen neuen Artikel an, sofern es keinen Artikel mit gleichem Namen und Hersteller gibt.
	void newArticle@@Neuer_Artikel(ComponentContainer parent, String name@@Bezeichnung, Fraction price@@Preis, Integer minStock@@Mindestlagerbestand, Integer maxStock@@Maximallagerbestand, Integer producerDeliveryTime@@Herstellerlieferzeit, Producer producer@@Hersteller) throws CycleException, DoubleDefinitionException;

	//Legt eine neue Produktgruppe als Kind des <<parent>> ComponentContainers. Das Anlegen zweier Produktrgruppen in einem ComponentContainer mit dem selbem Namen wird verhindert (es wird eine DoubleDefinitionException geworfen).
	void newProductGroup@@Neue_Produktgruppe(ComponentContainer parent, String name@@Name) throws CycleException, DoubleDefinitionException;

	//Verschiebt eine Component aus ihrem derzeitigen ComponentConatiner nach <<newParentGroup>>. Zyklen werden dabei verhindert.
	void moveTo@@verschieben(Component component, ComponentContainer newParentGroup@@Zielgruppe)throws CycleException;

	//Ã„ndert den Namen eines Artikels TODO: PrÃ¼fen ob es schon einen Artikel mit <<newName>> und gleichem Hersteller gibt.
	no-view void changeArticleName(ArticleWrapper article, String newName);

	//Ändert den Preis eines Artikels. Laufende Bestellungen sind von der Änderung nicht betroffen.
	no-view void changeArticlePrice(ArticleWrapper article, Fraction newPrice) throws InvalidInputException;

	//Ändert die Herstellerlieferzeit eines Arikelts. Laufende Nachbestellungen sind davon nicht betroffen.
	no-view void changeArticleProducerDeliveryTime(ArticleWrapper article, Integer newValue) throws InvalidInputException;

	//Ändert den Mindestlagerbestand eines Artikels auf <<newValue>>. Liegt der neue Wert über dem alten wird eine Nachbestellung (um maxStock zu erreichen) ausgelößt.
	no-view void changeMinStock(ArticleWrapper article, Integer newValue) throws InvalidInputException;

	//Ändert den Maximallagerbestand eines Artikel auf <<newValue>>.
	no-view void changeMaxStock(ArticleWrapper article, Integer newValue) throws InvalidInputException;

	//Gibt einen Artikel zum Verkauf frei. Es werden ausreichend Artikel nachbestellt, um maxStock zu erreichen.
	void startSelling@@Verkauf_starten(ArticleWrapper article checked);

	//Beendet des Verkaufen eines Artikels. Sind noch Artikel vorhanden werden diese als Restposten weiter verkauft.
	void stopSelling@@Verkauf_beenden(ArticleWrapper article checked);

	no-view Article getArticle(ArticleWrapper wrapper);

	//--------------------------------
	//-----Customer Delivery Time-----
	//--------------------------------
	//Legt eine neue Kundenlieferzeit an. Der Name einen Lieferzeit muss dabei eindeutig sein.
	void createCustomerDeliveryTime@@Neue_Kundenlieferzeit(CustomerDeliveryTimeManager customerDeliveryTimeManager, String name@@Name, Fraction price@@Preis, Integer time@@Lieferzeit) throws DoubleDefinitionException, InvalidInputException;
	
	//Ändert den Preis einer Kundenlieferzeit. Laufende Bestellungen sind davon nicht betroffen.
	no-view void changeCustomerDeliveryTimePrice(CustomerDeliveryTime customerDeliveryTime, Fraction newValue@@Neuer_Preis) throws InvalidInputException;
	
	//Ändert die Zeit einer Kundenlieferzeit. Bereits versendete Bestellungen sind davon nicht betroffen.
	no-view void changeCustomerDeliveryTimeTime(CustomerDeliveryTime customerDeliveryTime, Integer newValue@@Neue_Lieferzeit) throws InvalidInputException;

	//------------------
	//-----Settings-----
	//------------------
	//Ändert das Startguthaben von Neukunden
	no-view void changeNewCustomerDefaultBalance(Fraction newValue ) throws InvalidInputException;

	//Ändert das Limit von Neukunden
	no-view void changeNewCustomerDefaultLimit(Fraction newValue) throws InvalidInputException;

	//Ändert den Prozentsatz für Retouren
	no-view void changeReturnPercentage(Fraction newValue) throws InvalidInputException;


	//-----------------
	//-----Testing-----
	//-----------------
	//Only for testing (remove no-view if you want to use the functions)
	no-view void reduceArticleStock(ArticleWrapper article, Integer quantity) throws NotEnoughStockException;
	no-view void increaseArticleStock(ArticleWrapper article, Integer quantity);
}



server CustomerService extends Service {
	//-----------------
	//-----Manager-----
	//-----------------
	server-only observe Shop shop;

	CustomerArticleLst articleLst;
	ComponentManager componentManager;
	CustomerDeliveryTimeManager customerDeliveryTimeManager##cdtm;

	prior CustomerAccount account;
	ShoppingCart cart;
	observe CustomerOrderManager orderManager;

	//--------------------
	//----ShoppingCart----
	//--------------------
	//FÃ¼gt eine Artikel mit einer bestimmten Anzahl zum Warenkorb hinzu.
	void addToCart@@In_den_Warenkorb(ArticleWrapper article checked, Integer quantity@@Anzahl);

	//Ändert die Anzahl eines Artikels im Warenkorb. Werte unter 1 werden unterbunden.
	void changeArticleQuantity@@Anzahl_ï¿½ndern(ShoppingCartQuantifiedArticle article, Integer newQuantity@@Anzahl);
	
	//Entfernt <<article>> aus dem Warenkorb.
	void removeFromCart@@Entfernen(ShoppingCartQuantifiedArticle article);
	
	//Entfernt alle in <<cart>> enthaltene Artikel aus diesem.
	void emptyCart@@Leeren(ShoppingCart cart);

	//Ordering
	/*Bestellt den Inhalt des Warenkorbs <<cart>>. Kann die Bestellung ausgeführt werden (wenn genügend Artikel vorhanden sind und der Kunde
	 genug Geld hat) wird der Warenkorb geleert.*/
	void order@@Bestellen(ShoppingCart cart, CustomerDeliveryTime customerDeliveryTime@@Versandart) throws NotEnoughStockException, NotEnoughMoneyException, EmptyCartException;

	/*Bestellt den Inhalt des Warenkorbs <<cart>>. Artikel von denen nicht genug vorhanden sind werden beim Hersteller nachbestellt (unzwar ausreichend viele, um nach dem Abarbeiten der
	 Vorbestellung maxStock viele zu haben). Noch vorhandene Bestände werden schon reserviert.
	Artikel von denen schon ausreichend viele vorhanden sind, werden bis zum eintreffen der nachbestellten Artikel 
	reserviert.*/
	void preOrder@@Vorbestellen(ShoppingCart cart, CustomerDeliveryTime customerDeliveryTime@@Versandart) throws NotEnoughMoneyException, EmptyCartException;

	/*Ist eine Bestellung im WaitingForAcceptState kann sie mit acceptOrder() vom Kunden angenommen werden. Dabei wird dem Kunden 
	der berechnete Gesamtpreis abgezogen. Als Retour markierte Artikel werden zurück geschickt. Der Gesamtpreis wird entsprechend
	des einstellbaren Prozentsatzes für Retouren angepasst. */
	void acceptOrder@@Lieferung_annehmen(Order order);

	//Markiert einen Artikel als Retour
	void markForReturn@@Als_Retour_markieren(OrderQuantifiedArticle article checked);

	//Entfernt die Retour-Markierung eines Artikels
	void unmarkForReturn@@Retour_markierung_entfernen(OrderQuantifiedArticle article checked);

	/*Bricht eine Vorbestellung ab. Kann ausgeführt werden, solange die Vorbestellung noch nicht im Zustand InTransit ist.
	 Die reservierten Artikel werden wieder zum Verkauf angeboten*/
	void cancelPreOrder@@Stornieren(Order order checked);

	//Money
	//Fügt dem <<customerAccount>> <<amount>>€ hinzu
	void deposit@@Einzahlen(CustomerAccount customerAccount, Fraction amount);
	
	//Zieht dem <<customerAccount>> <<amount>>€ ab, solange der Kontostand dadurch nicht unter 0 fällt. Ansonsten wird eine NotEnoughMoneyException geworfen.
	void withdraw@@Auszahlen(CustomerAccount customerAccount, Fraction amount) throws NotEnoughMoneyException;

	//Search
	//Sucht nach Artikeln und fügt die Suchergebnisse der <<customerArticleLst>> hinzu. Es können die Oracle Platzhalter verwendet werden.
	void findArticle@@Artikel_suchen(CustomerArticleLst customerArticleLst, String name@@Bezeichnung);
	
	//Leert die Suchliste <<customerArticleLst>>
	void clear@@Suche_zurücksetzen(CustomerArticleLst customerArticleLst);
	
	//Löscht alle Fehlermeldungen
	void clearError@@Fehler_zurücksetzten(ErrorDisplay error);

}

server CustomerRegisterService##crs extends Service {
	//Registriert ein neues Kundenkunde. Der Benutzername muss eindeutig sein (ansosnten wird eine UserAlreadyExistsException geworfen).
	active void register@@Registrieren(String accountName@@Benutzername, String password@@Kennwort PASSWORD) throws UserAlreadyExistsException;
}

//-----------------------------------------------
//--------------------Manager--------------------
//-----------------------------------------------

//The Shop contains most operations that are handled as transactions and/or events. The Services are supposed to delegate the users call to the Shop. This is especially important for operations that effect the Owner and the Customers immediately at the same time (ie start/stop selling of an article or ordering a shopping cart).
singleton Shop{

	//--------------------------
	//-----Owner Operations-----	
	//--------------------------
	//For operation description see the OwnerService server

	//Producer
	event Producer createProducer(String name) throws DoubleDefinitionException, InvalidInputException;

	//Articles
	active event ArticleWrapper newArticle(ComponentContainer parent, String name, Fraction price, Integer minStock, Integer maxStock, Integer producerDeliveryTime, Producer producer) throws CycleException, DoubleDefinitionException, InvalidInputException;
	active event ProductGroup newProductGroup(ComponentContainer parent, String name) throws CycleException, DoubleDefinitionException, InvalidInputException;

	active event void moveTo(Component component, ComponentContainer newParentGroup)throws CycleException;

	active event void changeArticleName(ArticleWrapper article, String newName) throws InvalidInputException, DoubleDefinitionException;
	active event void changeArticlePrice##cap(ArticleWrapper article, Fraction newPrice) throws InvalidInputException;
	active event void changeMinStock(ArticleWrapper article, Integer newValue) throws InvalidInputException;
	active event void changeMaxStock(ArticleWrapper article, Integer newValue) throws InvalidInputException;

	active event void startSelling(ArticleWrapper article);
	active event void stopSelling(ArticleWrapper article);

	//Customer Delivery Time
	active event void createCustomerDeliveryTime##ccdt(String name, Fraction price, Integer time) throws DoubleDefinitionException, InvalidInputException;
	active event void changeCustomerDeliveryTimePrice##ccdtp(CustomerDeliveryTime customerDeliveryTime, Fraction newValue) throws InvalidInputException;
	active event void changeCustomerDeliveryTimeTime##ccdtt(CustomerDeliveryTime customerDeliveryTime, Integer newValue) throws InvalidInputException;


	//-----------------------------
	//-----Customer Operations-----	
	//-----------------------------
	//For operation description see the CustomerService server
	active event void orderCart(CustomerOrderManager manager, ShoppingCart cart, CustomerDeliveryTime customerDeliveryTime@@Versandart) throws NotEnoughMoneyException, EmptyCartException, ArticleOrderException;
	active event void preOrderCart(CustomerOrderManager manager, ShoppingCart cart, CustomerDeliveryTime customerDeliveryTime@@Versandart) throws NotEnoughMoneyException, EmptyCartException, ArticleOrderException;
	active event void acceptOrder(CustomerOrderManager manager, Order order) throws OrderNotAcceptableException, NotEnoughMoneyException;
	
	active event void cancelPreOrder(CustomerOrderManager manager, Order order);

}

//CustomerArticleLsts are used for the article search functionality for each customer
class CustomerArticleLst##cal {
	public ArticleWrapper ** articles;

	void find(String name);
	void clear();
}

//The ProducerLst holds all existing Producers
singleton ProducerLst {
	public Producer ** currentProducer##currProd;
	active Producer createProducer(String name) throws DoubleDefinitionException, InvalidInputException;
}

//The CustomerDeliveryTimeManager holds all existing CustomerDeliveryTimes
singleton CustomerDeliveryTimeManager##cdtm {
	public CustomerDeliveryTime ** customerDeliveryTimes##cdts;
	CustomerDeliveryTime createCustomerDeliveryTime##ccdt(String name, Fraction price, Integer time) throws DoubleDefinitionException, InvalidInputException;
}

singleton Settings{
	public Fraction newCustomerDefaultBalance##ncdb@@Neukunden_Startguthaben;
	public Fraction newCustomerDefaultLimit##ncdlOwn@@Neukunden_Limit;
	public Fraction returnPercentage@@Retouren_Prozentsatz;

	void changeNewCustomerDefaultBalance(Fraction newValue) throws InvalidInputException;
	void changeNewCustomerDefaultLimit(Fraction newValue) throws InvalidInputException;
	void changeReturnPercentage(Fraction newValue) throws InvalidInputException;
}

//The ReOrderManager is responsible for reordering articles at the producers (and simulating delivery times).
singleton ReOrderManager covers BackgroundTask{
	ReOrderQuantifiedArticle ** reorderArticles;

	//Reorders enough aricles to get back to maxStock
	void reOrderIfNecessary##roin(ArticleWrapper article);

	//Reorders <<quantity>> amount of articles (used for preorders only)
	void reOrderForPreorder##rofp(ArticleWrapper article, Integer quantity);

	event void doReorderStep();
}

abstract class OrderManager{
	public Order ** orders;
}

class CustomerOrderManager##com extends OrderManager{
	prior no-view CustomerAccount account;

	Order newOrder(ShoppingCart cart, CustomerDeliveryTime customerDeliveryTime) throws NotEnoughMoneyException, EmptyCartException,  ArticleOrderException;
	Order newPreOrder(ShoppingCart cart, CustomerDeliveryTime customerDeliveryTime) throws NotEnoughMoneyException, EmptyCartException, ArticleOrderException, ArticleNotInSaleException;

	//Accepts the order. OrderQuantifiedArticles in the OrderQuantifiedArticleMarkedForReturnState will get returned.
	void acceptOrder(Order order) throws NotEnoughMoneyException, OrderNotAcceptableException;

	void cancelPreOrder(Order order);
}

singleton BackgroundTaskManager##btm{
	BackgroundTask ** tasks;
	void addTask(BackgroundTask task);
	void startTasks();
	void stopTasks();
	event void step();
}

abstract class BackgroundTask{
	void startTask(Integer tickTime);
	void stopTask();
	abstract void step();
}

singleton GlobalOrderManager##oom extends OrderManager covers BackgroundTask{
	void addOrder(Order order);

	//Set the state of the order to FinishedOrderState, removes the order from the GlobalOrderManager and adds it to the GlobalOrderArchive
	void finishOrder(Order order);

	event void handleOrderArticlesInReturnOrderState(Order order, ArticlesInReturnOrderState articlesInReturnOrderState);
	event void handleOrderInTransitOrderState(Order order, InTransitOrderState inTransitOrderState);
	event void handleOrderPreOrderState(Order order, PreOrderState preOrderState);
	event void handleOrderWaitingForAcceptOrderState(Order order, WaitingForAcceptOrderState waitingForAcceptOrderState);

}

singleton GlobalOrderArchive##ooa{
	public Order ** orders;
	void addOrder(Order order);
}

//The ReturnManager is only used for displaying ongoing returns for the Owner. The actual return logic is done in the GlobalOrderManager.
singleton ReturnManager{
	public ArticleReturn ** articleReturn;
	void addArticleReturn##aar(ArticleReturn articleReturn);
	void removeArticleReturn##aar(ArticleReturn articleReturn);
}




//---------------------------------------------
//--------------------Model--------------------
//---------------------------------------------
hierarchy collapsed CompHierarchy;


singleton ComponentManager implements ComponentContainer{
	skip-view ComponentContainerImplementation container hierarchy CompHierarchy;
}

abstract class Component{
	prior no-view ComponentContainer parent;
	void moveTo(ComponentContainer container) throws CycleException;
}

interface ComponentContainer{
   void removeComponent(Component component);
	void addComponent(Component component) throws CycleException;

	ProductGroup newProductGroup##cspg(String name) throws CycleException, DoubleDefinitionException, InvalidInputException;
	ArticleWrapper newArticle(String name, Fraction price, Integer minStock, Integer maxStock, Integer producerDeliveryTime, Producer producer) throws CycleException, DoubleDefinitionException, InvalidInputException;
}

class ComponentContainerImplementation##cci implements ComponentContainer{
	public Component ** components hierarchy CompHierarchy;
}

class ProductGroup extends Component implements ComponentContainer{
	skip-view  ComponentContainerImplementation container hierarchy CompHierarchy;
	public-write prior indexed String name@@Name;
}

class ArticleWrapper extends Component{
   public prior server-only one-to-one (server-only myWrapper) Article article;

	derived Fraction price@@Preis;
	derived String name@@Name;
}

class Article{
	public prior indexed String name@@Bezeichnung;

	public prior Fraction price@@Preis;
	public prior Integer minStock@@Mindestlagerbestand;
	public prior Integer maxStock@@Maximallagerbestand;
	public Integer currentStock@@Lagerbestand;
	public prior Integer producerDeliveryTime@@Herstellerlieferzeit;

	public-write no-view prior Producer producer;
	public-write no-view ArticleState state;

	derived String currentState@@Status;
	derived String producerName@@Hersteller;

	void reduceStock(Integer quantity) throws NotEnoughStockException;
	void increaseStock(Integer quantity);

	void order(Integer quantity) throws NotEnoughStockException, ArticleNotInSaleException;

	void startSelling();
	void stopSelling();

	void changeName(String newValue) throws InvalidInputException, DoubleDefinitionException;
	void changePrice(Fraction newValue) throws InvalidInputException;
	void changeProducerDeliveryTime(Integer newValue) throws InvalidInputException;
	void changeMinStock(Integer newValue) throws InvalidInputException;
	void changeMaxStock(Integer newValue) throws InvalidInputException;
	//Report a goja bug? one-to-one wrapper not accessible despite being public
	derived ArticleWrapper wrapper;
}


abstract class ArticleState{
}
class NewCreated extends ArticleState{
}
class InSale extends ArticleState{
}
class RemainingStock extends ArticleState{
}
class NotInSale extends ArticleState{
}


abstract class QuantifiedArticle{
	prior public Integer quantity@@Anzahl;
	prior public no-view ArticleWrapper article;

	void increaseQuantity(Integer amount);
}

class ShoppingCartQuantifiedArticle##scqa extends QuantifiedArticle{
	active void changeArticleQuantity##caq(Integer newQuantity) throws InvalidInputException;

	derived Fraction price@@Preis;
}

class OrderQuantifiedArticle##oqa extends QuantifiedArticle{
	prior public Fraction articlePriceAtOrderTime##apatot@@Preis;
	public-write no-view OrderQuantifiedArticleState state;
	void markForReturn();
	void unmarkForReturn();

}

abstract class OrderQuantifiedArticleState##ooas{
}
class OrderQuantifiedArticleNormalState##ooans extends OrderQuantifiedArticleState{
}
class OrderQuantifiedArticleMarkedForReturnState##ooamafrs extends OrderQuantifiedArticleState{
}
class OrderQuantifiedArticlePreOrder##ooapo extends OrderQuantifiedArticleState{
	public-write prior Integer leftQuantity;
}


class ReturnQuantifiedArticle##rqa extends QuantifiedArticle{
}

class ReOrderQuantifiedArticle##roqa extends QuantifiedArticle{
	no-view	Integer  producerDeliveryTimeAtReorder##pdtar;
	public-write Integer countdown@@Verbleibende_Lieferzeit;
}

class Producer{
	public prior indexed String name;
}

class CustomerAccount{
	public prior indexed String name@@Benutzername;
	public prior Fraction balance@@Kontostand;
	prior Fraction limit@@Limit;
	ShoppingCart shoppingCart;

	active void deposit(Fraction amount);

	active void withdraw(Fraction amount) throws NotEnoughMoneyException;

	active void debit(Fraction amount) throws NotEnoughMoneyException;
	void debitIgnoreLimit(Fraction amount);

	extern Boolean checkForEnoughMoney(Fraction amount);
}

class CustomerDeliveryTime{
	prior public indexed String name@@Name;
	prior public Fraction price@@Preis;
	prior public Integer deliveryTime@@Lieferzeit;

	void changePrice(Fraction newValue) throws InvalidInputException;
	void changeTime(Integer newValue) throws InvalidInputException;
}

class ShoppingCart{
	public ShoppingCartQuantifiedArticle ** articles;

	active void addArticle(ShoppingCartQuantifiedArticle article);
	active void removeArticle(ShoppingCartQuantifiedArticle article);
	void empty();
}

class Order{
	public OrderQuantifiedArticle ** articles;
	prior public CustomerDeliveryTime customerDeliveryTime;
	prior public CustomerAccount customerAccount;
	void addArticle(OrderQuantifiedArticle orderQuantifiedArticle);

	public-write Fraction totalPrice@@Gesamtpreis;
	public prior Fraction returnPercentageAtOrderTime##rpaot@@Retourenprozentsatz;
	prior public-write no-view OrderStatus state;
}

class ArticleReturn{
	prior	one-to-one (server-only myOrder) Order order;
	public ReturnQuantifiedArticle ** returnArticles;
	void addArticle(ReturnQuantifiedArticle orderQuantifiedArticle);
}

abstract class OrderStatus{
}

class ProcessingOrderState##pos extends OrderStatus{
}
class InTransitOrderState##itos extends OrderStatus{
	public-write prior Integer ticksLeft;
}

class PreOrderState extends OrderStatus{

}
class WaitingForAcceptOrderState##wfao extends OrderStatus{
	public-write prior Integer ticksLeft;
}
class ArticlesInReturnOrderState##airos extends OrderStatus{
	public prior no-view ArticleReturn articleReturn;
	public-write prior Integer ticksLeft;
}

class FinishedOrderState##fos extends OrderStatus{
}
class CanceledOrderState##cos extends OrderStatus{
}

//--------------------------------------------------
//--------------------Exceptions--------------------
//--------------------------------------------------
abstract exception ArticleOrderException{}

exception InvalidInputException{} 

exception DoubleDefinitionException{}
exception UserAlreadyExistsException{}

exception NotEnoughStockException  extends ArticleOrderException{}
exception NotEnoughMoneyException{}
exception EmptyCartException{}
exception OrderNotAcceptableException{}
exception ArticleNotInSaleException extends ArticleOrderException{}
}
