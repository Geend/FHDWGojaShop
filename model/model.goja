model shop {

// Server relevant classes - region begin

server Server {
	Service service;
}

abstract server Service {
  	observe RootProductGroup rootProductGroup;

}

server OwnerService extends Service {

	ProducerLst prmanager;
	void createProducer(String name) throws DoubleDefinitionException;


	void newArticle(ProductGroup parent, String name, Fraction price, Integer minStock, Integer maxStock, Integer producerDeliveryTime, Producer producer) throws CycleException;
	void newProductGroup(ProductGroup parent, String name) throws CycleException, DoubleDefinitionException;
	void newProductGroup@@NeueProduktgruppe(String name) throws DoubleDefinitionException, CycleException;
	
	void moveTo(SubComponent component, ProductGroup newParentGroup)throws CycleException;


	void changeArticleName(OwnerArticleWrapper article, String newName);
	void startSelling(StandardArticleWrapper article checked);
	void stopSelling(StandardArticleWrapper article checked);

	void reduceArticleStock(StandardArticleWrapper article, Integer quantity) throws NotEnoughStockException; //Only for testing
	void increaseArticleStock(StandardArticleWrapper article, Integer quantity);//Only for testing

	OwnerArticleWrapper loadOwnerServiceArticleWrapper(StandardArticleWrapper wrapper checked);
}

server CustomerService extends Service {
	ShoppingCart cart;

	CustomerShopArticleWrapper loadArticleWrapper(StandardArticleWrapper wrapper);
}

server CustomerRegisterService##crs extends Service {
	active void register(String accountName, String password PASSWORD) throws UserAlreadyExistsException;
}


// Server relevant classes -- region end

// manager relevant classes -- region begin


singleton ProducerLst {
	public Producer ** currentProducer##currProd;
	active Producer createProducer(String name) throws DoubleDefinitionException;
}

// manager relevant classes -- region end

// main model classes -- region begin

hierarchy collapsed CompHierarchy;

abstract class Component{
	public-write prior String name;
}

interface SubComponent{	
	prior no-view ProductGroup parent;	
	active event void moveTo(ProductGroup productGroup) throws CycleException;
}

abstract class ProductGroup extends Component{
	
   public observe ComponentWrapper ** components hierarchy CompHierarchy;
	
	active void newSubProductGroup##cspg(String name) throws CycleException, DoubleDefinitionException;
	active void newArticle(String name, Fraction price, Integer minStock, Integer maxStock, Integer producerDeliveryTime, Producer producer) throws CycleException;

//	event	void addComponent(Component component) throws CycleException;
   event	void removeComponent(Component component);

	event	void addComponentWrapper(ComponentWrapper componentWrapper) throws CycleException;
}


singleton RootProductGroup extends ProductGroup{
}

class SubProductGroup extends ProductGroup implements SubComponent {
	
}

class Article extends Component implements SubComponent{
	public-write prior Fraction price;
	public-write prior Integer minStock;
	public-write prior Integer maxStock;
	public-write Integer currentStock;
	public-write prior Integer producerDeliveryTime;

	public-write no-view prior Producer producer;
	public-write no-view ArticleState state;
}


abstract class ComponentWrapper{
	public server-only prior specializable Component component hierarchy CompHierarchy;
}


abstract class ArticleWrapper extends ComponentWrapper{
  specializable Article component;
}

class StandardArticleWrapper##daw extends ArticleWrapper{	
	derived String name;
	Article gArticle();
}


class OwnerArticleWrapper##oaw extends ArticleWrapper{
	derived Article article;	
	derived String name;
	derived Fraction price;
	derived Integer minStock;
	derived Integer maxStock;
	derived Integer currentStock;
	derived Integer producerDeliveryTime;

	derived String currentState;
	derived String producerName;


   derived no-view ArticleState state;

	active event void reduceStock(Integer quantity) throws NotEnoughStockException;
	active event void increaseStock(Integer quantity);

	active event void startSelling();
	active event void stopSelling();
}

class CustomerShopArticleWrapper##csaw extends ArticleWrapper{
	derived String name;
	derived Fraction price;	
}

abstract class ProductGroupWrapper##pgw extends ComponentWrapper{
  specializable ProductGroup component;
}
class DefaultProductGroupWrapper##opgw extends ProductGroupWrapper{
	derived String name;
	derived  ComponentWrapper ** components;
}



class ShopArticleWrapper##saw extends ArticleWrapper{
	void addToCart(Integer amount);
}

class ShoppingCartArticleWrapper##scaw extends ArticleWrapper{
	void removeFromCart();
}

class OrderArticleWrapper##oraw extends ArticleWrapper{
	Fraction priceAtOrder;
	void accept();
	void sendBack();
}


// Article States -- region begin

abstract class ArticleState{
}
class NewCreated extends ArticleState{
}
class InSale extends ArticleState{
}
class RemainingStock extends ArticleState{
}
class NotInSale extends ArticleState{
}

// Article States -- region end

class Producer{
	public prior String name;
}


abstract class QuantifiedArticle{
	prior Integer quantity;	
}

class ShoppingCartQuantifiedArticle##scqa extends QuantifiedArticle{
	ShoppingCartArticleWrapper article;
}

class OrderQuantifiedArticle##oqa extends QuantifiedArticle{
	OrderArticleWrapper article;
}

class CustomerAccount{
	Fraction balance;
	Integer limit;
	ShoppingCart shoppingCart;

	void deposit(Fraction amount);
	void debit(Fraction amount);	
}

class ShoppingCart{
	ShoppingCartQuantifiedArticle ** articles;
}

abstract class AbstractOrder{
	OrderQuantifiedArticle ** articles;
	CustomerDeliveryTime customerDeliveryTime;
}

class Order extends AbstractOrder{
}

class PreOrder extends AbstractOrder{
	void cancel();
}

// main model classes -- region end

class CustomerDeliveryTime{
	prior Fraction price;
	prior Integer deliveryTime;
}


exception DoubleDefinitionException{}
exception UserAlreadyExistsException{}

exception NotEnoughStockException{}
}


