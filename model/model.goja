model shop {

// Server relevant classes - region begin

server Server {
	one-to-one (server-only myServer) ProductGroup rootProductGroup; // Symmetrische Beziehung wurde bei Löwe nur benutzt, um signalChanged auf dem Server aufzurufen vom Manager aus...
	ProducerLst prmanager;

	void addArticle(ProductGroup parent, String name, Fraction price, Integer minStock, Integer maxStock, Integer producerDeliveryTime, Producer producer) throws CycleException;
	void addProductGroup(ProductGroup parent, String name) throws CycleException, DoubleDefinition;

	void createProductGroup@@NeueProduktgruppe(String name) throws DoubleDefinition, CycleException;
	
	void moveTo(SubComponent component, ProductGroup newParentGroup)throws CycleException;

	void createProducer(String name) throws DoubleDefinition;

	void nextArticleState(Article article);
	void changeArticleName(Article article, String newName);
	void changeArticlePrice(Article article, Fraction newPrice); 
	void changeArticleMinStock(Article article, Integer newArticleMinStock);
	void changeArticleMaxStock(Article article, Integer newArticleMaxStock);

	void reduceArticleStock(Article article, Integer quantity); //Only for testing
	void increaseArticleStock(Article article, Integer quantity);//Only for testing
}

// Server relevant classes -- region end

// manager relevant classes -- region begin


class ProducerLst {
	/*observe*/ Producer ** currentProducer##currProd;
	active Producer createProducer(String name) throws DoubleDefinition;
}

// manager relevant classes -- region end

// main model classes -- region begin

hierarchy collapsed CompHierarchy;

abstract class Component{
	public-write prior String name;
}

abstract class ProductGroup extends Component{
	
	/*observe*/ Component ** components hierarchy CompHierarchy;
	active void addSubProductGroup##cspg(String name) throws CycleException, DoubleDefinition;
	active void addArticle(String name, Fraction price, Integer minStock, Integer maxStock, Integer producerDeliveryTime, Producer producer) throws CycleException;

	void addComponent(Component component) throws CycleException;
	void removeComponent(Component component);
}

class RootProductGroup extends ProductGroup{
}

class SubProductGroup extends ProductGroup implements SubComponent {
}

class Article extends Component  implements SubComponent{
	public-write prior Fraction price;
	public-write prior Integer minStock;
	public-write prior Integer maxStock;
	public Integer currentStock;
	public prior Integer producerDeliveryTime;

	public no-view prior Producer producer;
	public derived String producerName;

	public-write no-view ArticleState state;
	public derived String currentState;


	active void reduceStock(Integer quantity) throws NotEnoughStockException;
	active void increaseStock(Integer quantity);
}

interface SubComponent{
	no-view prior ProductGroup parentGroup;
	active void moveTo(ProductGroup productGroup) throws CycleException;
}


// Article States -- region begin

abstract class ArticleState{
	abstract ArticleState nextState();
}

class NewCreated extends ArticleState{
}
class InSale extends ArticleState{
}
class RemainingStock extends ArticleState{
}
class NotInSale extends ArticleState{
}

// Article States -- region end

class Producer{
	public prior String name;
}

/*
abstract class QuantifiedArticle{
	prior Integer quantity;	
}

class ShoppingCartQuantifiedArticle##scqa extends QuantifiedArticle{
	ShoppingCartArticleWrapper article;
}

class OrderQuantifiedArticle##oqa extends QuantifiedArticle{
	OrderArticleWrapper article;
}

class CustomerAccount{
	Fraction balance;
	Integer limit;
	ShoppingCart shoppingCart;

	void deposit(Fraction amount);
	void debit(Fraction amount);	
}

class ShoppingCart{
	ShoppingCartQuantifiedArticle ** articles;
}

abstract class AbstractOrder{
	OrderQuantifiedArticle ** articles;
	CustomerDeliveryTime customerDeliveryTime;
}

class Order extends AbstractOrder{
}

class PreOrder extends AbstractOrder{
	void cancel();
}

// main model classes -- region end

class CustomerDeliveryTime{
	prior Fraction price;
	prior Integer deliveryTime;
}

abstract class ArticleWrapper{
	Article article;
	derived String name;
}

class ShopArticleWrapper##saw extends ArticleWrapper{
	void addToCart(Integer amount);
}

class ShoppingCartArticleWrapper##scaw extends ArticleWrapper{
	void removeFromCart();
}

class OrderArticleWrapper##oaw extends ArticleWrapper{
	Fraction priceAtOrder;
	void accept();
	void sendBack();
}
*/
exception DoubleDefinition{}

exception NotEnoughStockException{}
}


