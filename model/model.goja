model shop {

// Server relevant classes - region begin
server Server {
	Service service;
}

abstract server Service {
}

server OwnerService extends Service {

	//Manager
  	one-to-one (server-only myServer) RootProductGroup rootProductGroup;
	CustomerDeliveryTimeManager customerDeliveryTimeManager##cdtm;
	ProducerLst prmanager;
	Settings settings;
  one-to-one (server-only myServer)	ReOrderManager reOrderManager;
one-to-one (server-only myServer)	OwnerOrderManager ownerOrderManager##oom;

one-to-one (server-only myServer)	ReturnManager returnManager##rm;
	//Producer
	void createProducer@@Hersteller_anlegen(String name) throws DoubleDefinitionException;

	//Articles
	//TODO: Prevent article creation with same name and producer
	void newArticle@@Neuer_Artikel(ProductGroup parent, String name, Fraction price, Integer minStock, Integer maxStock, Integer producerDeliveryTime, Producer producer) throws CycleException;
	void newProductGroup@@Neue_Produktgruppe(ProductGroup parent, String name) throws CycleException, DoubleDefinitionException;
	void newProductGroup@@Neue_Produktgruppe(String name) throws DoubleDefinitionException, CycleException;
	
	void moveTo@@verschieben(SubComponent component, ProductGroup newParentGroup)throws CycleException;


	no-view void changeArticleName(ArticleWrapper article, String newName);
	no-view void changeArticlePrice(ArticleWrapper article, Fraction newPrice);

	void startSelling@@Verkauf_starten(ArticleWrapper article checked);
	void stopSelling@@Verkauf_beenden(ArticleWrapper article checked);

	no-view Article getArticle(ArticleWrapper wrapper);


	//Customer Delivery Time
	void createCustomerDeliveryTime@@Neue_Kundenlieferzeit(String name, Fraction price, Integer time) throws DoubleDefinitionException;
	no-view void changeCustomerDeliveryTimePrice(CustomerDeliveryTime customerDeliveryTime, Fraction newValue);
	no-view void changeCustomerDeliveryTimeTime(CustomerDeliveryTime customerDeliveryTime, Integer newValue);


	//Settings
	no-view void changeNewCustomerDefaultBalance(Fraction newValue );
	no-view void changeNewCustomerDefaultLimit(Fraction newValue);
	no-view void changeReturnPercentage(Fraction newValue);


	//Only for testing
	void reduceArticleStock(ArticleWrapper article, Integer quantity) throws NotEnoughStockException;
	void increaseArticleStock(ArticleWrapper article, Integer quantity);
}

server CustomerService extends Service {

	CustomerArticleLst articleLst;
  	observe RootProductGroup rootProductGroup;

	CustomerDeliveryTimeManager customerDeliveryTimeManager##cdtm;

	prior CustomerAccount account;
	ShoppingCart cart;
	CustomerOrderManager orderManager;

	//ShoppingCart
	void addToCart(ArticleWrapper article checked, Integer quantity);
	void changeArticleQuantity(ShoppingCartQuantifiedArticle article, Integer newQuantity);
	void removeFromCart(ShoppingCartQuantifiedArticle article);

	//Ordering
	void order(ShoppingCart cart, CustomerDeliveryTime customerDeliveryTime) throws NotEnoughStockException, NotEnoughMoneyException;
	void preOrder(ShoppingCart cart, CustomerDeliveryTime customerDeliveryTime) throws NotEnoughMoneyException;
	
	void acceptOrder(Order order);
	void markForReturn(OrderQuantifiedArticle article);
	void unmarkForReturn(OrderQuantifiedArticle article);

	//Money
	void deposit(Fraction amount);
	void withdraw(Fraction amount) throws NotEnoughMoneyException;

	//Search
	void findArticle(String name);
	void clearError(ErrorDisplay error);
	void clear();
}

server CustomerRegisterService##crs extends Service {
	active void register(String accountName, String password PASSWORD) throws UserAlreadyExistsException;
}
// Server relevant classes -- region end



// manager relevant classes -- region begin
class CustomerArticleLst##cal {
	public ArticleWrapper ** articles;
	
	void find(String name);
	void clear();
}

singleton ProducerLst {
	public Producer ** currentProducer##currProd;
	active Producer createProducer(String name) throws DoubleDefinitionException;
}

singleton CustomerDeliveryTimeManager##cdtm {
	public CustomerDeliveryTime ** customerDeliveryTimes##cdts;
	active CustomerDeliveryTime createCustomerDeliveryTime##ccdt(String name, Fraction price, Integer time) throws DoubleDefinitionException;
}

singleton Settings{
	public-write Fraction newCustomerDefaultBalance##ncdb;
	public-write Fraction newCustomerDefaultLimit##ncdlOwn;
	public-write Fraction returnPercentage;
}

singleton ReOrderManager{
	ReOrderQuantifiedArticle ** reorderArticles;
	active void reOrder(ArticleWrapper article);

	active void startOrdering();
}

abstract class OrderManager{
	public Order ** orders;
}

class CustomerOrderManager##com extends OrderManager{
	prior no-view CustomerAccount account;

	active void newOrder(ShoppingCart cart, CustomerDeliveryTime customerDeliveryTime) throws NotEnoughStockException, NotEnoughMoneyException;
	active void newPreOrder(ShoppingCart cart, CustomerDeliveryTime customerDeliveryTime) throws NotEnoughMoneyException;
}

singleton OwnerOrderManager##oom extends OrderManager{
	void addOrder(Order order);

	void startOrderProcessing();
}

singleton ReturnManager{
	ArticleReturn ** articleReturn;
	active void addArticleReturn##aar(ArticleReturn articleReturn);
	
}
// manager relevant classes -- region end

// main model classes -- region begin

hierarchy collapsed CompHierarchy;

abstract class Component{
	public-write prior indexed String name@@Name;
}

interface SubComponent{	
	prior no-view ProductGroup parent;	
	active event void moveTo(ProductGroup productGroup) throws CycleException;
}

abstract class ProductGroup extends Component{	
   public observe Component ** components hierarchy CompHierarchy;
	
	active event void newSubProductGroup##cspg(String name) throws CycleException, DoubleDefinitionException;
	active void newArticle(String name, Fraction price, Integer minStock, Integer maxStock, Integer producerDeliveryTime, Producer producer) throws CycleException;


   event	void removeComponent(Component component);
	event	void addComponent(Component component) throws CycleException;
}


singleton RootProductGroup extends ProductGroup{
}

class SubProductGroup extends ProductGroup implements SubComponent {	
}

class ArticleWrapper extends Component implements SubComponent{
  public server-only prior Article article;

	derived Fraction price@@Preis;
	active event void changeArticleName(String newName);
	active void changePrice(Fraction newPrice);
}

class Article extends Component{
	public-write prior Fraction price@@Preis;
	public-write prior Integer minStock@@Mindestlagerbestand;
	public-write prior Integer maxStock@@Maximallagerbestand;
	public-write Integer currentStock@@Lagerbestand;
	public-write prior Integer producerDeliveryTime@@Herstellerlieferzeit;

	public-write no-view prior Producer producer;
	public-write no-view ArticleState state;

	derived String currentState@@Status;
	derived String producerName@@Hersteller;

	active event void reduceStock(Integer quantity) throws NotEnoughStockException;
	active event void increaseStock(Integer quantity);

	active event void startSelling();
	active event void stopSelling();
}



// Article States -- region begin

abstract class ArticleState{
}
class NewCreated extends ArticleState{
}
class InSale extends ArticleState{
}
class RemainingStock extends ArticleState{
}
class NotInSale extends ArticleState{
}

// Article States -- region end



abstract class QuantifiedArticle{
	prior public Integer quantity;
	prior public no-view ArticleWrapper article;

	void increaseQuantity(Integer amount);
}

class ShoppingCartQuantifiedArticle##scqa extends QuantifiedArticle{
	active void changeArticleQuantity##caq(Integer newQuantity);
}

class OrderQuantifiedArticle##oqa extends QuantifiedArticle{
	prior Fraction articlePriceAtOrderTime##apatot;	
}
class ReturnQuantifiedArticle##rqa extends QuantifiedArticle{

}

class ReOrderQuantifiedArticle##roqa extends QuantifiedArticle{
	Integer producerDeliveryTimeAtReorder##pdtar;
	public-write Integer countdown;
}

class Producer{
	public prior String name;
}

class CustomerAccount{
	public prior indexed String name;
	public-write prior Fraction balance;
	public prior Fraction limit;
	ShoppingCart shoppingCart;

	active void deposit(Fraction amount);
	active void withdraw(Fraction amount) throws NotEnoughMoneyException;	

	active void debit(Fraction amount) throws NotEnoughMoneyException;	

}

class CustomerDeliveryTime{
	prior public String name;
	prior public-write Fraction price;
	prior public-write Integer deliveryTime;
}

class ShoppingCart{
	public ShoppingCartQuantifiedArticle ** articles;

	active void addArticle(ShoppingCartQuantifiedArticle article);
	active void removeArticle(ShoppingCartQuantifiedArticle article);
}

class Order{
	public OrderQuantifiedArticle ** articles;
	prior CustomerDeliveryTime customerDeliveryTime;
	void addArticle(OrderQuantifiedArticle orderQuantifiedArticle);

	public Fraction totalPrice;

	prior public-write OrderState state;
}

class ArticleReturn{
	prior	Order order;
	ReturnQuantifiedArticle ** returnArticles;
	void addArticle(ReturnQuantifiedArticle orderQuantifiedArticle);
}

abstract class OrderState{
}
class ProcessingOrderState##pos extends OrderState{
}
class InTransitOrderState##itos extends OrderState{
	public-write prior Integer ticksLeft;
}

class PreOrderState extends OrderState{
}
class WaitingForAcceptOrderState##wfao extends OrderState{
	public-write prior Integer ticksLeft;
}


class FinishedOrderState##fos extends OrderState{
}

// main model classes -- region end

exception DoubleDefinitionException{}
exception UserAlreadyExistsException{}
exception NotEnoughStockException{}
exception NotEnoughMoneyException{}
}


